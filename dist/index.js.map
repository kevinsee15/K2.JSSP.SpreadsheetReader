{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import \"@k2oss/k2-broker-core\";\n\nconst SpreadsheetReaderObject:string = \"SpreadsheetReader\";\nconst SpreadsheetReaderObjectFileProperty:string = \"File\";\nconst SpreadsheetReaderObjectReadMethod:string = \"Read\";\n\nmetadata = {\n  systemName: \"k2.jssp.spreadsheetreader\",\n  displayName: \"K2 JSSP Spreadsheet Reader\",\n  description: \"A K2 JSSP based broker that can ingest Excel or CSV files and return as a list that can be displayed in K2 SmartForm list view.\",\n  configuration: {\n    \"Web API URL\": {\n     \"displayName\": \"Web API URL\",\n     \"type\": \"string\",\n     required: true\n    },\n    \"Columns To Read\": {\n     \"displayName\": \"Columns To Read\",\n     \"type\": \"string\",\n     required: true\n    }\n  }\n};\n\nondescribe = async function ({ configuration }): Promise<void> {\n  let columnsCSV: string = <string> configuration[\"Columns To Read\"];\n  let columns: string[] = columnsCSV.split(\",\");\n\n  var schema = {\n    objects: {\n      [SpreadsheetReaderObject] : {\n        displayName: \"Spreadsheet Reader\",\n        description: \"Reads a spreadsheet file in CSV or Excel format and returns the contents as a list that can be displayed in a K2 SmartForm list view.\",\n        properties: {\n          [SpreadsheetReaderObjectFileProperty] : {\n            displayName: \"File\",\n            type: \"attachment\"\n          }\n        },\n        methods: {\n          [SpreadsheetReaderObjectReadMethod] : {\n            displayName: \"Read\",\n            type: \"list\",\n            inputs:[\"File\"],\n            outputs:[]\n          }\n        }\n      }\n    }\n  }\n\n  for (let column of columns) {\n    schema.objects.SpreadsheetReader.properties[column] = {\n      displayName: column,\n      type: \"string\"\n    };\n  }\n\n  schema.objects.SpreadsheetReader.methods.Read.outputs = columns;\n\n  postSchema(schema);\n};\n\nonexecute = async function ({\n  objectName,\n  methodName,\n  parameters,\n  properties,\n  configuration,\n  schema,\n}): Promise<void> {\n  switch (objectName) {\n    case SpreadsheetReaderObject:\n      await onexecute_SpreadsheetReader(methodName, properties, parameters, configuration);\n      break;\n    default:\n      throw new Error(\"The object \" + objectName + \" is not supported.\");\n  }\n};\n\nasync function onexecute_SpreadsheetReader(\n  methodName: string,\n  properties: SingleRecord,\n  parameters: SingleRecord,\n  configuration: SingleRecord\n): Promise<void> {\n  switch (methodName) {\n    case SpreadsheetReaderObjectReadMethod:\n      await onexecute_SpreadsheetReader_Read(properties, configuration);\n      break;\n    default:\n      throw new Error(\"The method \" + methodName + \" is not supported.\");\n  }\n}\n\nfunction onexecute_SpreadsheetReader_Read(properties: SingleRecord, configuration: SingleRecord) {\n  // var data = new FormData();\n  // // console.log(properties[SpreadsheetReaderObjectFileProperty].filename);\n  // // console.log(properties[SpreadsheetReaderObjectFileProperty].content);\n  // // data.append('attributes', JSON.stringify({\n  // //     \"name\": properties[SpreadsheetReaderObjectFileProperty].filename,\n  // //     \"parent\": {\n  // //         \"id\": \"0\"\n  // //     }\n  // // })); //IMPORTANT\n  // data.append('attachment', properties[SpreadsheetReaderObjectFileProperty]);\n  // // let columnsCSV: string = <string> configuration[\"Columns To Read\"];\n  // // let columns: string[] = columnsCSV.split(\",\");\n  // // for (let column of columns) {\n  // //   console.log(\"appending \" + column);\n  // //   form.append('ColumnsToRead', column);\n  // // }\n  // var xhr = new XMLHttpRequest();\n  var data = new FormData();\n  data.append('file', properties[SpreadsheetReaderObjectFileProperty]);\n  var xhr = new XMLHttpRequest();\n  xhr.onreadystatechange = function () {\n      if (xhr.readyState !== 4) return;\n      if (xhr.status !== 201) throw new Error(\"Failed with status \" + JSON.stringify(xhr.response));\n      console.log(xhr.response);\n      postResult(xhr.response);\n  };\n  // let webAPIUrl:string = configuration[\"Web API URL\"].toString();\n  let webAPIUrl:string = \"https://k2utilitiesexceltools.azurewebsites.net/api/Excel/upload\"\n  console.log(\"Sending request...\");\n  xhr.open(\"POST\", webAPIUrl);\n  xhr.send(data);\n}"],"names":["SpreadsheetReaderObject","SpreadsheetReaderObjectFileProperty","SpreadsheetReaderObjectReadMethod","metadata","systemName","displayName","description","configuration","required","ondescribe","async","columns","split","schema","objects","properties","type","methods","inputs","outputs","column","SpreadsheetReader","Read","postSchema","onexecute","objectName","methodName","parameters","data","FormData","append","xhr","XMLHttpRequest","onreadystatechange","readyState","status","Error","JSON","stringify","response","console","log","postResult","webAPIUrl","open","send","onexecute_SpreadsheetReader_Read","onexecute_SpreadsheetReader"],"mappings":"YAEA,MAAMA,EAAiC,oBACjCC,EAA6C,OAC7CC,EAA2C,OAEjDC,SAAW,CACTC,WAAY,4BACZC,YAAa,6BACbC,YAAa,kIACbC,cAAe,eACE,aACC,mBACP,SACRC,UAAU,qBAEQ,aACH,uBACP,SACRA,UAAU,KAKfC,WAAaC,gBAAgBH,cAAEA,QAEzBI,EAD8BJ,EAAc,mBACbK,MAAM,SAErCC,EAAS,CACXC,QAAS,EACNd,GAA2B,CAC1BK,YAAa,qBACbC,YAAa,wIACbS,WAAY,EACTd,GAAuC,CACtCI,YAAa,OACbW,KAAM,eAGVC,QAAS,EACNf,GAAqC,CACpCG,YAAa,OACbW,KAAM,OACNE,OAAO,CAAC,QACRC,QAAQ,YAOb,IAAIC,KAAUT,EACjBE,EAAOC,QAAQO,kBAAkBN,WAAWK,GAAU,CACpDf,YAAae,EACbJ,KAAM,UAIVH,EAAOC,QAAQO,kBAAkBJ,QAAQK,KAAKH,QAAUR,EAExDY,WAAWV,IAGbW,UAAYd,gBAAgBe,WAC1BA,EAD0BC,WAE1BA,EAF0BC,WAG1BA,EAH0BZ,WAI1BA,EAJ0BR,cAK1BA,EAL0BM,OAM1BA,WAEQY,QACDzB,QAQTU,eACEgB,EACAX,EACAY,EACApB,UAEQmB,QACDxB,QAQT,SAA0Ca,EAA0BR,OAkB9DqB,EAAO,IAAIC,SACfD,EAAKE,OAAO,OAAQf,EAAU,UAC1BgB,EAAM,IAAIC,eACdD,EAAIE,mBAAqB,cACE,IAAnBF,EAAIG,eACW,MAAfH,EAAII,OAAgB,MAAM,IAAIC,MAAM,sBAAwBC,KAAKC,UAAUP,EAAIQ,WACnFC,QAAQC,IAAIV,EAAIQ,UAChBG,WAAWX,EAAIQ,gBAGfI,EAAmB,mEACvBH,QAAQC,IAAI,sBACZV,EAAIa,KAAK,OAAQD,GACjBZ,EAAIc,KAAKjB,GAtCCkB,CAAiC/B,uBAGjC,IAAIqB,MAAM,cAAgBV,EAAa,uBAlBvCqB,CAA4BrB,EAAYX,uBAGxC,IAAIqB,MAAM,cAAgBX,EAAa"}